# Generated by Django 5.0.7 on 2025-04-23 07:55

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import mailmind.core.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("is_email_verified", models.BooleanField(default=False)),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="core_user_set",
                        related_query_name="core_user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="core_user_set",
                        related_query_name="core_user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
            managers=[
                ("objects", mailmind.core.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("name", models.CharField(blank=True, max_length=255)),
                ("last_interaction", models.DateTimeField(auto_now=True)),
                ("interaction_count", models.IntegerField(default=0)),
                ("organization", models.CharField(blank=True, max_length=255)),
                ("title", models.CharField(blank=True, max_length=255)),
                ("metadata", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contacts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-interaction_count"],
            },
        ),
        migrations.CreateModel(
            name="Email",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message_id", models.CharField(db_index=True, max_length=255)),
                (
                    "uid",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="UID des E-Mails im IMAP-Ordner",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "conversation_id",
                    models.CharField(blank=True, db_index=True, max_length=255),
                ),
                ("from_address", models.EmailField(max_length=254)),
                ("from_name", models.CharField(blank=True, max_length=255)),
                ("subject", models.CharField(blank=True, max_length=1000)),
                ("body_text", models.TextField(blank=True)),
                ("body_html", models.TextField(blank=True)),
                ("received_at", models.DateTimeField(db_index=True)),
                (
                    "sent_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Datum/Zeit aus dem 'Date'-Header der E-Mail",
                        null=True,
                    ),
                ),
                (
                    "date_str",
                    models.CharField(
                        blank=True,
                        help_text="Originaler 'Date'-String aus dem Header",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("is_read", models.BooleanField(db_index=True, default=False)),
                ("is_flagged", models.BooleanField(db_index=True, default=False)),
                (
                    "is_replied",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Entspricht \\Answered Flag",
                    ),
                ),
                (
                    "is_deleted_on_server",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Entspricht \\Deleted Flag",
                    ),
                ),
                (
                    "is_draft",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Entspricht \\Draft Flag",
                    ),
                ),
                (
                    "headers",
                    models.JSONField(
                        blank=True, help_text="E-Mail Header als JSON", null=True
                    ),
                ),
                (
                    "size_rfc822",
                    models.PositiveIntegerField(
                        blank=True, help_text="Größe laut Server (RFC822)", null=True
                    ),
                ),
                (
                    "size",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Tatsächliche Größe der heruntergeladenen Nachricht",
                        null=True,
                    ),
                ),
                ("embedding_generated", models.BooleanField(default=False)),
                ("ai_processed", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "bcc_contacts",
                    models.ManyToManyField(
                        blank=True, related_name="emails_bcc", to="core.contact"
                    ),
                ),
                (
                    "cc_contacts",
                    models.ManyToManyField(
                        blank=True, related_name="emails_cc", to="core.contact"
                    ),
                ),
                (
                    "from_contact",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="emails_from",
                        to="core.contact",
                    ),
                ),
                (
                    "reply_to_contacts",
                    models.ManyToManyField(
                        blank=True, related_name="emails_reply_to", to="core.contact"
                    ),
                ),
                (
                    "to_contacts",
                    models.ManyToManyField(
                        blank=True, related_name="emails_to", to="core.contact"
                    ),
                ),
            ],
            options={
                "ordering": ["-sent_at", "-received_at"],
            },
        ),
        migrations.CreateModel(
            name="Attachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("filename", models.CharField(max_length=255)),
                ("content_type", models.CharField(max_length=100)),
                ("size", models.IntegerField()),
                (
                    "content_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Content-ID des Anhangs (für Inline-Bilder)",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "content_disposition",
                    models.CharField(
                        blank=True,
                        help_text="Content-Disposition (inline/attachment)",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("file", models.FileField(upload_to="attachments/%Y/%m/%d/")),
                ("extracted_text", models.TextField(blank=True)),
                ("embedding_vector", models.BinaryField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "email",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="core.email",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AISuggestion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("reply", "Antwort"),
                            ("forward", "Weiterleitung"),
                            ("task", "Aufgabe"),
                            ("calendar", "Kalendereintrag"),
                            ("flag", "Markierung"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("content", models.TextField()),
                ("metadata", models.JSONField(default=dict)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Ausstehend"),
                            ("accepted", "Akzeptiert"),
                            ("modified", "Modifiziert"),
                            ("rejected", "Abgelehnt"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("user_feedback", models.TextField(blank=True)),
                ("confidence_score", models.FloatField(default=0.0)),
                (
                    "processing_time",
                    models.FloatField(help_text="Verarbeitungszeit in Sekunden"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "email",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="suggestions",
                        to="core.email",
                    ),
                ),
            ],
            options={
                "ordering": ["-confidence_score", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="EmailAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Anzeigename für das Konto", max_length=100
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        choices=[
                            ("gmail", "Google Mail"),
                            ("outlook", "Microsoft Outlook"),
                            ("custom", "Custom IMAP"),
                        ],
                        max_length=20,
                    ),
                ),
                ("imap_server", models.CharField(max_length=255)),
                ("imap_port", models.IntegerField(default=993)),
                ("imap_use_ssl", models.BooleanField(default=True)),
                ("smtp_server", models.CharField(max_length=255)),
                ("smtp_port", models.IntegerField(default=587)),
                ("smtp_use_tls", models.BooleanField(default=True)),
                (
                    "username",
                    models.CharField(
                        help_text="IMAP/SMTP Benutzername", max_length=255
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        blank=True,
                        help_text="Nur für Basic Auth - verschlüsselt",
                        max_length=255,
                    ),
                ),
                (
                    "oauth_refresh_token",
                    models.TextField(
                        blank=True, help_text="OAuth2 Refresh Token - verschlüsselt"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("last_sync", models.DateTimeField(blank=True, null=True)),
                (
                    "sync_status",
                    models.CharField(
                        choices=[
                            ("idle", "Idle"),
                            ("pending", "Pending"),
                            ("syncing", "Syncing"),
                            ("synced", "Synced"),
                            ("error", "Error"),
                        ],
                        db_index=True,
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("last_sync_error", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="email_accounts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "unique_together": {("user", "email")},
            },
        ),
        migrations.AddField(
            model_name="email",
            name="account",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="emails",
                to="core.emailaccount",
            ),
        ),
        migrations.CreateModel(
            name="EmailVerification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("token", models.CharField(max_length=64, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Verification",
                "verbose_name_plural": "Email Verifications",
            },
        ),
        migrations.AddIndex(
            model_name="email",
            index=models.Index(
                fields=["account", "sent_at"], name="core_email_account_116f5b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="email",
            index=models.Index(
                fields=["account", "received_at"], name="core_email_account_58fcf9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="email",
            index=models.Index(
                fields=["message_id"], name="core_email_message_6cd15a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="email",
            index=models.Index(fields=["uid"], name="core_email_uid_b91403_idx"),
        ),
        migrations.AddIndex(
            model_name="email",
            index=models.Index(
                fields=["conversation_id"], name="core_email_convers_541551_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="email",
            index=models.Index(
                fields=["is_read"], name="core_email_is_read_a62cc2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="email",
            index=models.Index(
                fields=["is_flagged"], name="core_email_is_flag_654851_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="email",
            index=models.Index(
                fields=["is_replied"], name="core_email_is_repl_9e9fef_idx"
            ),
        ),
    ]
